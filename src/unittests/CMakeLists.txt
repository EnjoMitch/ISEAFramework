cmake_minimum_required (VERSION 3.2)
project (unittests)

# - Find CxxTest
# Find the CxxTest suite and declare a helper macro for creating unit tests
# and integrating them with CTest.
# For more details on CxxTest see http://cxxtest.tigris.org
#
# INPUT Variables
#
#   CXXTEST_USE_PYTHON
#       If true, the CXXTEST_ADD_TEST macro will use
#       the Python test generator instead of Perl.
#
# OUTPUT Variables
#
#   CXXTEST_FOUND
#       True if the CxxTest framework was found
#   CXXTEST_INCLUDE_DIR
#       Where to find the CxxTest include directory
#   CXXTEST_PERL_TESTGEN_EXECUTABLE
#       The perl-based test generator.
#   CXXTEST_PYTHON_TESTGEN_EXECUTABLE
#       The python-based test generator.
#
# MACROS for optional use by CMake users:
#
#    CXXTEST_ADD_TEST(<test_name> <gen_source_file> <input_files_to_testgen...>)
#       Creates a CxxTest runner and adds it to the CTest testing suite
#       Parameters:
#           test_name               The name of the test
#           gen_source_file         The generated source filename to be generated by CxxTest
#           input_files_to_testgen  The list of header files containing the
#                                   CxxTest::TestSuite's to be included in this runner
#
#       #==============
#       Example Usage:
#
#           find_package(CxxTest)
#           if(CXXTEST_FOUND)
#               include_directories(${CXXTEST_INCLUDE_DIR})
#               enable_testing()
#
#               CXXTEST_ADD_TEST(unittest_foo foo_test.cc
#                                 ${CMAKE_CURRENT_SOURCE_DIR}/foo_test.h)
#               target_link_libraries(unittest_foo foo) # as needed
#           endif()
#
#              This will (if CxxTest is found):
#              1. Invoke the testgen executable to autogenerate foo_test.cc in the
#                 binary tree from "foo_test.h" in the current source directory.
#              2. Create an executable and test called unittest_foo.
#
#      #=============
#      Example foo_test.h:
#
#          #include <cxxtest/TestSuite.h>
#
#          class MyTestSuite : public CxxTest::TestSuite
#          {
#          public:
#             void testAddition( void )
#             {
#                TS_ASSERT( 1 + 1 > 1 );
#                TS_ASSERT_EQUALS( 1 + 1, 2 );
#             }
#          };
#

#=============================================================================
# Copyright 2008-2009 Kitware, Inc.
# Copyright 2008-2009 Philip Lowman <philip@yhbt.com>
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distributed this file outside of CMake, substitute the full
#  License text for the above reference.)

# Version 1.2 (3/2/08)
#     Included patch from Tyler Roscoe to have the perl & python binaries
#     detected based on CXXTEST_INCLUDE_DIR
# Version 1.1 (2/9/08)
#     Clarified example to illustrate need to call target_link_libraries()
#     Changed commands to lowercase
#     Added licensing info
# Version 1.0 (1/8/08)
#     Fixed CXXTEST_INCLUDE_DIRS so it will work properly
#     Eliminated superfluous CXXTEST_FOUND assignment
#     Cleaned up and added more documentation

#=============================================================
# CXXTEST_ADD_TEST (public macro)
#=============================================================
function(CXXTEST_ADD_TEST _cxxtest_testname _cxxtest_outfname _unittest_headers _unittest_sources)
    set(_cxxtest_real_outfname ${CMAKE_CURRENT_BINARY_DIR}/${_cxxtest_outfname})
    if(CXXTEST_USE_PYTHON)
        set(_cxxtest_executable ${CXXTEST_PYTHON_TESTGEN_EXECUTABLE})
    else()
        set(_cxxtest_executable ${CXXTEST_PERL_TESTGEN_EXECUTABLE})
    endif()

    if(BUILDING_ON_BUILDSERVER)
        add_custom_command(
            OUTPUT  ${_cxxtest_real_outfname}
            DEPENDS ${ARGN}
            COMMAND ${_cxxtest_executable}
            --runner=XmlPrinter -o ${_cxxtest_real_outfname} ${ARGN}
        )
    else(BUILDING_ON_BUILDSERVER)
        add_custom_command(
            OUTPUT  ${_cxxtest_real_outfname}
            DEPENDS ${_unittest_headers}
            COMMAND ${_cxxtest_executable}
            --error-printer -o ${_cxxtest_real_outfname} ${_unittest_headers}
        )
    endif(BUILDING_ON_BUILDSERVER)
    set_source_files_properties(${_cxxtest_real_outfname} ${ARGN} PROPERTIES GENERATED true)
    add_executable(${_cxxtest_testname} ${_cxxtest_real_outfname} ${_unittest_headers} ${_unittest_sources})

    if(CMAKE_RUNTIME_OUTPUT_DIRECTORY)
        add_test(${_cxxtest_testname} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${_cxxtest_testname})
    elseif(EXECUTABLE_OUTPUT_PATH)
        add_test(${_cxxtest_testname} ${EXECUTABLE_OUTPUT_PATH}/${_cxxtest_testname})
    else()
        add_test(${_cxxtest_testname} ${CMAKE_CURRENT_BINARY_DIR}/${_cxxtest_testname})
    endif()

endfunction(CXXTEST_ADD_TEST)

#=============================================================
# main()
#=============================================================

find_path(CXXTEST_INCLUDE_DIR cxxtest/TestSuite.h)
find_program(CXXTEST_PERL_TESTGEN_EXECUTABLE cxxtestgen.pl
    PATHS ${CXXTEST_INCLUDE_DIR})
find_program(CXXTEST_PYTHON_TESTGEN_EXECUTABLE cxxtestgen
    PATHS ${CXXTEST_INCLUDE_DIR})

include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(CxxTest DEFAULT_MSG CXXTEST_INCLUDE_DIR)


set(CXXTEST_INCLUDE_DIRS ${CXXTEST_INCLUDE_DIR})

#=============================================================
# UNITTEST
#=============================================================

SET( CXXTEST_USE_PYTHON true)
ADD_DEFINITIONS(-D_CXXTEST_HAVE_STD)
ADD_DEFINITIONS(-D_CXXTEST_HAVE_EH)

SET( SOURCES_HEADER
     )
SET( SOURCES_FILES
     )

SET(UNINCLUDE "" ) #${CMAKE_CURRENT_SOURCE_DIR}/threading) #
if(MATRIX_IMPLEMENTATION STREQUAL "Symbolic")
    SET(UNINCLUDE ${UNINCLUDE}
    ${CMAKE_CURRENT_SOURCE_DIR}/cinterface/
    ${CMAKE_CURRENT_SOURCE_DIR}/export/
    ${CMAKE_CURRENT_SOURCE_DIR}/misc/TestFastCopyMatrix
    ${CMAKE_CURRENT_SOURCE_DIR}/observer/
    ${CMAKE_CURRENT_SOURCE_DIR}/states/TestSurfaceSoc
    ${CMAKE_CURRENT_SOURCE_DIR}/system/TestChoiceOfSystem
    ${CMAKE_CURRENT_SOURCE_DIR}/system/TestDaeSystem
    ${CMAKE_CURRENT_SOURCE_DIR}/system/TestLinearSystem
    ${CMAKE_CURRENT_SOURCE_DIR}/thermal/TestSimulation
    )
endif(MATRIX_IMPLEMENTATION STREQUAL "Symbolic")

FILE(GLOB_RECURSE TMP_SOURCE *.cpp)
foreach(f ${TMP_SOURCE})

    #Checks if file is in "${PROJECT_SOURCE_DIR}/unittests/"
    string(FIND ${f} "${CMAKE_CURRENT_SOURCE_DIR}/" not_source_path REVERSE)
    if( NOT ${not_source_path} EQUAL -1)
        #if part of uninclude then drop it
        foreach(g ${UNINCLUDE})

            string(FIND ${f} ${g} tmp_found REVERSE)
            if ( NOT ${tmp_found} EQUAL -1)
                break()
            endif( NOT ${tmp_found} EQUAL -1)

        endforeach(g ${UNINCLUDE})

        if ( ${tmp_found} EQUAL -1 )
            #else add it to sources
            SET( SOURCES_FILES ${SOURCES_FILES} ${f} )
        endif ( ${tmp_found} EQUAL -1 )
    endif( NOT ${not_source_path} EQUAL -1)
endforeach(f ${TMP_SOURCE})

FILE(GLOB_RECURSE TMP_SOURCE *.h)

foreach(f ${TMP_SOURCE})

    #Checks if file is in "${PROJECT_SOURCE_DIR}/unittests/"
    string(FIND ${f} "${CMAKE_CURRENT_SOURCE_DIR}/" not_source_path REVERSE)
    if( NOT ${not_source_path} EQUAL -1)
        #if part of uninclude then drop it
        foreach(g ${UNINCLUDE})

            string(FIND ${f} ${g} tmp_found REVERSE)
            if ( NOT ${tmp_found} EQUAL -1)
                break()
            endif( NOT ${tmp_found} EQUAL -1)

        endforeach(g ${UNINCLUDE})

        if ( ${tmp_found} EQUAL -1 )
            #else add it to sources
            SET( SOURCES_HEADER ${SOURCES_HEADER} ${f} )
        endif ( ${tmp_found} EQUAL -1 )
    endif( NOT ${not_source_path} EQUAL -1)
endforeach(f ${TMP_SOURCE})



SOURCE_GROUP("UnitTests" REGULAR_EXPRESSION ${CMAKE_CURRENT_SOURCE_DIR}/*)

SET(CMAKE_BUILD_WITH_INSTALL_RPATH True)

LINK_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/../../)

if (WIN32)
    SET(CMAKE_LINK_LIBRARIES ${CMAKE_LINK_LIBRARIES} libISEAFrame.lib)
elseif(UNIX)
    SET(CMAKE_LINK_LIBRARIES ${CMAKE_LINK_LIBRARIES} ISEAFrame)
endif (WIN32)


SET(CMAKE_C_FLAGS ${CMAKE_CXX_FLAGS})

FILE(GLOB_RECURSE SUBDIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR}/*)

foreach(f ${SUBDIRECTORIES})
    GET_FILENAME_COMPONENT(dir_path ${f} PATH)
    STRING(REGEX REPLACE ${CMAKE_CURRENT_SOURCE_DIR}/ "" dir_path ${dir_path})
    STRING(REGEX REPLACE  "/"   "\\\\"  name ${dir_path} )
    SOURCE_GROUP(${name}  REGULAR_EXPRESSION ${CMAKE_CURRENT_SOURCE_DIR}/${dir_path}/*)
endforeach(f ${SUBDIRECTORIES})


if(CXXTEST_FOUND)
    include_directories(${CXXTEST_INCLUDE_DIR})
    enable_testing()

    CXXTEST_ADD_TEST(unittest unittest.cpp
		"${SOURCES_HEADER}"
		"${SOURCES_FILES}"
		)
        target_link_libraries(unittest  ${CMAKE_LINK_LIBRARIES} )
        target_compile_features(unittest PRIVATE cxx_auto_type)
        SET_TARGET_PROPERTIES(unittest PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endif(CXXTEST_FOUND)

if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set (SUBDIRSCREATED "YES")
    execute_process(COMMAND $CMAKE_COMMAND} -E create_symlink)
endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")

if (NOT USE_BUILD_ON_RWTH_CLUSTER)
   file(COPY xml/testconfig.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/Patch_Vertices_Save.csv DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/Patch_Areas_Save.csv DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/Patch_Temperatures_Save.csv DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/TestPouchBag.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/TestPouchBagDisc.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/TestShowBattery.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY thermal/TestRectangularblock.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY factory/thermal/TestThermalFactories.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY xml/TestXmlParser.xml DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)

   ## MATIO
   file(COPY container/structWithContent.mat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY container/structWith2D.mat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)
   file(COPY container/emptyStructs.mat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/../../)

   file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/../../CharacteristicLengthVisualization/)
endif (NOT USE_BUILD_ON_RWTH_CLUSTER)

